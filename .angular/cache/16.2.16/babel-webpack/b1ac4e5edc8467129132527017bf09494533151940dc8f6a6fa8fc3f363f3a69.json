{"ast":null,"code":"import { CommonModule } from '@angular/common';\nimport { SpinnerComponent } from './spinner.component';\nimport * as i0 from \"@angular/core\";\nexport class SpinnerModule {\n  static {\n    this.ɵfac = function SpinnerModule_Factory(t) {\n      return new (t || SpinnerModule)();\n    };\n  }\n  static {\n    this.ɵmod = /*@__PURE__*/i0.ɵɵdefineNgModule({\n      type: SpinnerModule\n    });\n  }\n  static {\n    this.ɵinj = /*@__PURE__*/i0.ɵɵdefineInjector({\n      imports: [CommonModule]\n    });\n  }\n}\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(SpinnerModule, {\n    declarations: [SpinnerComponent],\n    imports: [CommonModule],\n    exports: [SpinnerComponent]\n  });\n})();","map":{"version":3,"names":["CommonModule","SpinnerComponent","SpinnerModule","declarations","imports","exports"],"sources":["C:\\Users\\Usuario\\test-angular-ssr-migrado\\src\\app\\loading\\spinner\\spinner.module.ts"],"sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SpinnerComponent } from './spinner.component';\n\n@NgModule({\n  declarations: [SpinnerComponent],\n  exports: [SpinnerComponent],\n  imports: [CommonModule]\n})\nexport class SpinnerModule {}\n\n// This module imports CommonModule and declares a SpinnerComponent.\n// It also exports the SpinnerComponent so that it can be used in other modules.\n// The SpinnerModule is a good place to put components, directives, and pipes that are used across multiple modules in your application.\n// It helps to keep your code organized and makes it easier to manage dependencies.\n// The SpinnerModule can be imported into other modules to make the SpinnerComponent available for use.\n// This is a common pattern in Angular applications to create a shared module for reusable components.\n// The SpinnerModule can also include other shared components, directives, and pipes as needed.\n// This allows for better organization and reusability of code across the application.\n// The SpinnerModule can be imported into other feature modules to provide access to the shared components.\n// This helps to keep the code DRY (Don't Repeat Yourself) and makes it easier to maintain.\n// The SpinnerModule can also include services that are used across multiple modules.\n// This allows for better organization and reusability of services across the application.\n// The SpinnerModule can be imported into other feature modules to provide access to the shared services.\n// This helps to keep the code DRY (Don't Repeat Yourself) and makes it easier to maintain.\n// The SpinnerModule can also include pipes that are used across multiple modules.\n// This allows for better organization and reusability of pipes across the application.\n// The SpinnerModule can be imported into other feature modules to provide access to the shared pipes.\n// This helps to keep the code DRY (Don't Repeat Yourself) and makes it easier to maintain.\n// The SpinnerModule can also include directives that are used across multiple modules.\n// This allows for better organization and reusability of directives across the application."],"mappings":"AACA,SAASA,YAAY,QAAQ,iBAAiB;AAC9C,SAASC,gBAAgB,QAAQ,qBAAqB;;AAOtD,OAAM,MAAOC,aAAa;;;uBAAbA,aAAa;IAAA;EAAA;;;YAAbA;IAAa;EAAA;;;gBAFdF,YAAY;IAAA;EAAA;;;2EAEXE,aAAa;IAAAC,YAAA,GAJTF,gBAAgB;IAAAG,OAAA,GAErBJ,YAAY;IAAAK,OAAA,GADZJ,gBAAgB;EAAA;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}