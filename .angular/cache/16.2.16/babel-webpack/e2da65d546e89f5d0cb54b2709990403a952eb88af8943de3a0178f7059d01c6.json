{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SpinnerComponent } from './spinner.component';\nlet SpinnerModule = class SpinnerModule {};\nSpinnerModule = __decorate([NgModule({\n  declarations: [SpinnerComponent],\n  imports: [CommonModule],\n  exports: [SpinnerComponent]\n})], SpinnerModule);\nexport { SpinnerModule };\n// This module imports CommonModule and declares a SpinnerComponent.\n// It also exports the SpinnerComponent so that it can be used in other modules.\n// The SpinnerModule is a good place to put components, directives, and pipes that are used across multiple modules in your application.\n// It helps to keep your code organized and makes it easier to manage dependencies.\n// The SpinnerModule can be imported into other modules to make the SpinnerComponent available for use.\n// This is a common pattern in Angular applications to create a shared module for reusable components.\n// The SpinnerModule can also include other shared components, directives, and pipes as needed.\n// This allows for better organization and reusability of code across the application.\n// The SpinnerModule can be imported into other feature modules to provide access to the shared components.\n// This helps to keep the code DRY (Don't Repeat Yourself) and makes it easier to maintain.\n// The SpinnerModule can also include services that are used across multiple modules.\n// This allows for better organization and reusability of services across the application.\n// The SpinnerModule can be imported into other feature modules to provide access to the shared services.\n// This helps to keep the code DRY (Don't Repeat Yourself) and makes it easier to maintain.\n// The SpinnerModule can also include pipes that are used across multiple modules.\n// This allows for better organization and reusability of pipes across the application.\n// The SpinnerModule can be imported into other feature modules to provide access to the shared pipes.\n// This helps to keep the code DRY (Don't Repeat Yourself) and makes it easier to maintain.\n// The SpinnerModule can also include directives that are used across multiple modules.\n// This allows for better organization and reusability of directives across the application.","map":{"version":3,"names":["NgModule","CommonModule","SpinnerComponent","SpinnerModule","__decorate","declarations","imports","exports"],"sources":["C:\\Users\\Usuario\\test-angular-ssr-migrado\\src\\app\\loading\\spinner\\spinner.module.ts"],"sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SpinnerComponent } from './spinner.component';\n\n@NgModule({\n  declarations: [SpinnerComponent],\n  imports: [CommonModule],\n  exports: [SpinnerComponent],\n})\nexport class SpinnerModule {}\n\n// This module imports CommonModule and declares a SpinnerComponent.\n// It also exports the SpinnerComponent so that it can be used in other modules.\n// The SpinnerModule is a good place to put components, directives, and pipes that are used across multiple modules in your application.\n// It helps to keep your code organized and makes it easier to manage dependencies.\n// The SpinnerModule can be imported into other modules to make the SpinnerComponent available for use.\n// This is a common pattern in Angular applications to create a shared module for reusable components.\n// The SpinnerModule can also include other shared components, directives, and pipes as needed.\n// This allows for better organization and reusability of code across the application.\n// The SpinnerModule can be imported into other feature modules to provide access to the shared components.\n// This helps to keep the code DRY (Don't Repeat Yourself) and makes it easier to maintain.\n// The SpinnerModule can also include services that are used across multiple modules.\n// This allows for better organization and reusability of services across the application.\n// The SpinnerModule can be imported into other feature modules to provide access to the shared services.\n// This helps to keep the code DRY (Don't Repeat Yourself) and makes it easier to maintain.\n// The SpinnerModule can also include pipes that are used across multiple modules.\n// This allows for better organization and reusability of pipes across the application.\n// The SpinnerModule can be imported into other feature modules to provide access to the shared pipes.\n// This helps to keep the code DRY (Don't Repeat Yourself) and makes it easier to maintain.\n// The SpinnerModule can also include directives that are used across multiple modules.\n// This allows for better organization and reusability of directives across the application."],"mappings":";AAAA,SAASA,QAAQ,QAAQ,eAAe;AACxC,SAASC,YAAY,QAAQ,iBAAiB;AAC9C,SAASC,gBAAgB,QAAQ,qBAAqB;AAO/C,IAAMC,aAAa,GAAnB,MAAMA,aAAa,GAAG;AAAhBA,aAAa,GAAAC,UAAA,EALzBJ,QAAQ,CAAC;EACRK,YAAY,EAAE,CAACH,gBAAgB,CAAC;EAChCI,OAAO,EAAE,CAACL,YAAY,CAAC;EACvBM,OAAO,EAAE,CAACL,gBAAgB;CAC3B,CAAC,C,EACWC,aAAa,CAAG;SAAhBA,aAAa;AAE1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}