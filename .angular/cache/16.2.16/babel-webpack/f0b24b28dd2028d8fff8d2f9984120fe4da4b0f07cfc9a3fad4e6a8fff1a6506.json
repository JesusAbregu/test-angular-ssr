{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class LoadingService {\n  constructor() {\n    this.loadingSubject = new BehaviorSubject(false);\n    this.loading$ = this.loadingSubject.asObservable();\n  }\n  show() {\n    this.loadingSubject.next(true);\n  }\n  hide() {\n    this.loadingSubject.next(false);\n  }\n  static {\n    this.ɵfac = function LoadingService_Factory(t) {\n      return new (t || LoadingService)();\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: LoadingService,\n      factory: LoadingService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["BehaviorSubject","LoadingService","constructor","loadingSubject","loading$","asObservable","show","next","hide","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Usuario\\test-angular-ssr-migrado\\src\\app\\loading\\loading.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class LoadingService {\n  private loadingSubject = new BehaviorSubject<boolean>(false);\n  loading$ = this.loadingSubject.asObservable();\n\n  show(): void {\n    this.loadingSubject.next(true);\n  }\n\n  hide(): void {\n    this.loadingSubject.next(false);\n  }\n}\n"],"mappings":"AACA,SAASA,eAAe,QAAQ,MAAM;;AAKtC,OAAM,MAAOC,cAAc;EAH3BC,YAAA;IAIU,KAAAC,cAAc,GAAG,IAAIH,eAAe,CAAU,KAAK,CAAC;IAC5D,KAAAI,QAAQ,GAAG,IAAI,CAACD,cAAc,CAACE,YAAY,EAAE;;EAE7CC,IAAIA,CAAA;IACF,IAAI,CAACH,cAAc,CAACI,IAAI,CAAC,IAAI,CAAC;EAChC;EAEAC,IAAIA,CAAA;IACF,IAAI,CAACL,cAAc,CAACI,IAAI,CAAC,KAAK,CAAC;EACjC;;;uBAVWN,cAAc;IAAA;EAAA;;;aAAdA,cAAc;MAAAQ,OAAA,EAAdR,cAAc,CAAAS,IAAA;MAAAC,UAAA,EAFb;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}